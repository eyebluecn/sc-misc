// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newCommissionDO(db *gorm.DB, opts ...gen.DOOption) commissionDO {
	_commissionDO := commissionDO{}

	_commissionDO.commissionDODo.UseDB(db, opts...)
	_commissionDO.commissionDODo.UseModel(&db_model.CommissionDO{})

	tableName := _commissionDO.commissionDODo.TableName()
	_commissionDO.ALL = field.NewAsterisk(tableName)
	_commissionDO.ID = field.NewInt64(tableName, "id")
	_commissionDO.CreateTime = field.NewTime(tableName, "create_time")
	_commissionDO.UpdateTime = field.NewTime(tableName, "update_time")
	_commissionDO.Name = field.NewString(tableName, "name")
	_commissionDO.Amount = field.NewInt64(tableName, "amount")
	_commissionDO.ContractID = field.NewInt64(tableName, "contract_id")
	_commissionDO.AuthorID = field.NewInt64(tableName, "author_id")
	_commissionDO.ReceiptID = field.NewInt64(tableName, "receipt_id")
	_commissionDO.PaymentDays = field.NewString(tableName, "payment_days")
	_commissionDO.Status = field.NewInt32(tableName, "status")

	_commissionDO.fillFieldMap()

	return _commissionDO
}

// commissionDO 佣金表
type commissionDO struct {
	commissionDODo commissionDODo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	Name        field.String // 名称
	Amount      field.Int64  // 金额(单位：分)
	ContractID  field.Int64  // 合同id
	AuthorID    field.Int64  // 作者id
	ReceiptID   field.Int64  // 收款单id
	PaymentDays field.String // 账期
	Status      field.Int32  // 状态 0/1/2/3 未收款/已收款/已取消/已关闭

	fieldMap map[string]field.Expr
}

func (c commissionDO) Table(newTableName string) *commissionDO {
	c.commissionDODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commissionDO) As(alias string) *commissionDO {
	c.commissionDODo.DO = *(c.commissionDODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commissionDO) updateTableName(table string) *commissionDO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.Name = field.NewString(table, "name")
	c.Amount = field.NewInt64(table, "amount")
	c.ContractID = field.NewInt64(table, "contract_id")
	c.AuthorID = field.NewInt64(table, "author_id")
	c.ReceiptID = field.NewInt64(table, "receipt_id")
	c.PaymentDays = field.NewString(table, "payment_days")
	c.Status = field.NewInt32(table, "status")

	c.fillFieldMap()

	return c
}

func (c *commissionDO) WithContext(ctx context.Context) *commissionDODo {
	return c.commissionDODo.WithContext(ctx)
}

func (c commissionDO) TableName() string { return c.commissionDODo.TableName() }

func (c commissionDO) Alias() string { return c.commissionDODo.Alias() }

func (c commissionDO) Columns(cols ...field.Expr) gen.Columns {
	return c.commissionDODo.Columns(cols...)
}

func (c *commissionDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commissionDO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["name"] = c.Name
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["contract_id"] = c.ContractID
	c.fieldMap["author_id"] = c.AuthorID
	c.fieldMap["receipt_id"] = c.ReceiptID
	c.fieldMap["payment_days"] = c.PaymentDays
	c.fieldMap["status"] = c.Status
}

func (c commissionDO) clone(db *gorm.DB) commissionDO {
	c.commissionDODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commissionDO) replaceDB(db *gorm.DB) commissionDO {
	c.commissionDODo.ReplaceDB(db)
	return c
}

type commissionDODo struct{ gen.DO }

func (c commissionDODo) Debug() *commissionDODo {
	return c.withDO(c.DO.Debug())
}

func (c commissionDODo) WithContext(ctx context.Context) *commissionDODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commissionDODo) ReadDB() *commissionDODo {
	return c.Clauses(dbresolver.Read)
}

func (c commissionDODo) WriteDB() *commissionDODo {
	return c.Clauses(dbresolver.Write)
}

func (c commissionDODo) Session(config *gorm.Session) *commissionDODo {
	return c.withDO(c.DO.Session(config))
}

func (c commissionDODo) Clauses(conds ...clause.Expression) *commissionDODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commissionDODo) Returning(value interface{}, columns ...string) *commissionDODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commissionDODo) Not(conds ...gen.Condition) *commissionDODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commissionDODo) Or(conds ...gen.Condition) *commissionDODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commissionDODo) Select(conds ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commissionDODo) Where(conds ...gen.Condition) *commissionDODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commissionDODo) Order(conds ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commissionDODo) Distinct(cols ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commissionDODo) Omit(cols ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commissionDODo) Join(table schema.Tabler, on ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commissionDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commissionDODo) RightJoin(table schema.Tabler, on ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commissionDODo) Group(cols ...field.Expr) *commissionDODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commissionDODo) Having(conds ...gen.Condition) *commissionDODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commissionDODo) Limit(limit int) *commissionDODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commissionDODo) Offset(offset int) *commissionDODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commissionDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *commissionDODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commissionDODo) Unscoped() *commissionDODo {
	return c.withDO(c.DO.Unscoped())
}

func (c commissionDODo) Create(values ...*db_model.CommissionDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commissionDODo) CreateInBatches(values []*db_model.CommissionDO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commissionDODo) Save(values ...*db_model.CommissionDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commissionDODo) First() (*db_model.CommissionDO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.CommissionDO), nil
	}
}

func (c commissionDODo) Take() (*db_model.CommissionDO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.CommissionDO), nil
	}
}

func (c commissionDODo) Last() (*db_model.CommissionDO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.CommissionDO), nil
	}
}

func (c commissionDODo) Find() ([]*db_model.CommissionDO, error) {
	result, err := c.DO.Find()
	return result.([]*db_model.CommissionDO), err
}

func (c commissionDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.CommissionDO, err error) {
	buf := make([]*db_model.CommissionDO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commissionDODo) FindInBatches(result *[]*db_model.CommissionDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commissionDODo) Attrs(attrs ...field.AssignExpr) *commissionDODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commissionDODo) Assign(attrs ...field.AssignExpr) *commissionDODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commissionDODo) Joins(fields ...field.RelationField) *commissionDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commissionDODo) Preload(fields ...field.RelationField) *commissionDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commissionDODo) FirstOrInit() (*db_model.CommissionDO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.CommissionDO), nil
	}
}

func (c commissionDODo) FirstOrCreate() (*db_model.CommissionDO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.CommissionDO), nil
	}
}

func (c commissionDODo) FindByPage(offset int, limit int) (result []*db_model.CommissionDO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commissionDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commissionDODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commissionDODo) Delete(models ...*db_model.CommissionDO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commissionDODo) withDO(do gen.Dao) *commissionDODo {
	c.DO = *do.(*gen.DO)
	return c
}
