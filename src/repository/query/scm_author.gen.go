// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newAuthorDO(db *gorm.DB, opts ...gen.DOOption) authorDO {
	_authorDO := authorDO{}

	_authorDO.authorDODo.UseDB(db, opts...)
	_authorDO.authorDODo.UseModel(&db_model.AuthorDO{})

	tableName := _authorDO.authorDODo.TableName()
	_authorDO.ALL = field.NewAsterisk(tableName)
	_authorDO.ID = field.NewInt64(tableName, "id")
	_authorDO.CreateTime = field.NewTime(tableName, "create_time")
	_authorDO.UpdateTime = field.NewTime(tableName, "update_time")
	_authorDO.Username = field.NewString(tableName, "username")
	_authorDO.Password = field.NewString(tableName, "password")
	_authorDO.Realname = field.NewString(tableName, "realname")

	_authorDO.fillFieldMap()

	return _authorDO
}

// authorDO 作者表
type authorDO struct {
	authorDODo authorDODo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	Username   field.String // 用户名
	Password   field.String // 密码
	Realname   field.String // 真实姓名

	fieldMap map[string]field.Expr
}

func (a authorDO) Table(newTableName string) *authorDO {
	a.authorDODo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authorDO) As(alias string) *authorDO {
	a.authorDODo.DO = *(a.authorDODo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authorDO) updateTableName(table string) *authorDO {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.Username = field.NewString(table, "username")
	a.Password = field.NewString(table, "password")
	a.Realname = field.NewString(table, "realname")

	a.fillFieldMap()

	return a
}

func (a *authorDO) WithContext(ctx context.Context) *authorDODo { return a.authorDODo.WithContext(ctx) }

func (a authorDO) TableName() string { return a.authorDODo.TableName() }

func (a authorDO) Alias() string { return a.authorDODo.Alias() }

func (a authorDO) Columns(cols ...field.Expr) gen.Columns { return a.authorDODo.Columns(cols...) }

func (a *authorDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authorDO) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["username"] = a.Username
	a.fieldMap["password"] = a.Password
	a.fieldMap["realname"] = a.Realname
}

func (a authorDO) clone(db *gorm.DB) authorDO {
	a.authorDODo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authorDO) replaceDB(db *gorm.DB) authorDO {
	a.authorDODo.ReplaceDB(db)
	return a
}

type authorDODo struct{ gen.DO }

func (a authorDODo) Debug() *authorDODo {
	return a.withDO(a.DO.Debug())
}

func (a authorDODo) WithContext(ctx context.Context) *authorDODo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authorDODo) ReadDB() *authorDODo {
	return a.Clauses(dbresolver.Read)
}

func (a authorDODo) WriteDB() *authorDODo {
	return a.Clauses(dbresolver.Write)
}

func (a authorDODo) Session(config *gorm.Session) *authorDODo {
	return a.withDO(a.DO.Session(config))
}

func (a authorDODo) Clauses(conds ...clause.Expression) *authorDODo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authorDODo) Returning(value interface{}, columns ...string) *authorDODo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authorDODo) Not(conds ...gen.Condition) *authorDODo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authorDODo) Or(conds ...gen.Condition) *authorDODo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authorDODo) Select(conds ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authorDODo) Where(conds ...gen.Condition) *authorDODo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authorDODo) Order(conds ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authorDODo) Distinct(cols ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authorDODo) Omit(cols ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authorDODo) Join(table schema.Tabler, on ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authorDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *authorDODo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authorDODo) RightJoin(table schema.Tabler, on ...field.Expr) *authorDODo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authorDODo) Group(cols ...field.Expr) *authorDODo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authorDODo) Having(conds ...gen.Condition) *authorDODo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authorDODo) Limit(limit int) *authorDODo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authorDODo) Offset(offset int) *authorDODo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authorDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authorDODo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authorDODo) Unscoped() *authorDODo {
	return a.withDO(a.DO.Unscoped())
}

func (a authorDODo) Create(values ...*db_model.AuthorDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authorDODo) CreateInBatches(values []*db_model.AuthorDO, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authorDODo) Save(values ...*db_model.AuthorDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authorDODo) First() (*db_model.AuthorDO, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.AuthorDO), nil
	}
}

func (a authorDODo) Take() (*db_model.AuthorDO, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.AuthorDO), nil
	}
}

func (a authorDODo) Last() (*db_model.AuthorDO, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.AuthorDO), nil
	}
}

func (a authorDODo) Find() ([]*db_model.AuthorDO, error) {
	result, err := a.DO.Find()
	return result.([]*db_model.AuthorDO), err
}

func (a authorDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.AuthorDO, err error) {
	buf := make([]*db_model.AuthorDO, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authorDODo) FindInBatches(result *[]*db_model.AuthorDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authorDODo) Attrs(attrs ...field.AssignExpr) *authorDODo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authorDODo) Assign(attrs ...field.AssignExpr) *authorDODo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authorDODo) Joins(fields ...field.RelationField) *authorDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authorDODo) Preload(fields ...field.RelationField) *authorDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authorDODo) FirstOrInit() (*db_model.AuthorDO, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.AuthorDO), nil
	}
}

func (a authorDODo) FirstOrCreate() (*db_model.AuthorDO, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.AuthorDO), nil
	}
}

func (a authorDODo) FindByPage(offset int, limit int) (result []*db_model.AuthorDO, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authorDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authorDODo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authorDODo) Delete(models ...*db_model.AuthorDO) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authorDODo) withDO(do gen.Dao) *authorDODo {
	a.DO = *do.(*gen.DO)
	return a
}
