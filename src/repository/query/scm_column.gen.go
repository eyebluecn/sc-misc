// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newColumnDO(db *gorm.DB, opts ...gen.DOOption) columnDO {
	_columnDO := columnDO{}

	_columnDO.columnDODo.UseDB(db, opts...)
	_columnDO.columnDODo.UseModel(&db_model.ColumnDO{})

	tableName := _columnDO.columnDODo.TableName()
	_columnDO.ALL = field.NewAsterisk(tableName)
	_columnDO.ID = field.NewInt64(tableName, "id")
	_columnDO.CreateTime = field.NewTime(tableName, "create_time")
	_columnDO.UpdateTime = field.NewTime(tableName, "update_time")
	_columnDO.Name = field.NewString(tableName, "name")
	_columnDO.AuthorID = field.NewInt64(tableName, "author_id")
	_columnDO.Status = field.NewInt32(tableName, "status")

	_columnDO.fillFieldMap()

	return _columnDO
}

// columnDO 专栏表
type columnDO struct {
	columnDODo columnDODo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	Name       field.String // 专栏名称
	AuthorID   field.Int64  // 作者id
	Status     field.Int32  // 状态 NEW/OK/DISABLED 未发布/已生效/已禁用

	fieldMap map[string]field.Expr
}

func (c columnDO) Table(newTableName string) *columnDO {
	c.columnDODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c columnDO) As(alias string) *columnDO {
	c.columnDODo.DO = *(c.columnDODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *columnDO) updateTableName(table string) *columnDO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.Name = field.NewString(table, "name")
	c.AuthorID = field.NewInt64(table, "author_id")
	c.Status = field.NewInt32(table, "status")

	c.fillFieldMap()

	return c
}

func (c *columnDO) WithContext(ctx context.Context) *columnDODo { return c.columnDODo.WithContext(ctx) }

func (c columnDO) TableName() string { return c.columnDODo.TableName() }

func (c columnDO) Alias() string { return c.columnDODo.Alias() }

func (c columnDO) Columns(cols ...field.Expr) gen.Columns { return c.columnDODo.Columns(cols...) }

func (c *columnDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *columnDO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["name"] = c.Name
	c.fieldMap["author_id"] = c.AuthorID
	c.fieldMap["status"] = c.Status
}

func (c columnDO) clone(db *gorm.DB) columnDO {
	c.columnDODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c columnDO) replaceDB(db *gorm.DB) columnDO {
	c.columnDODo.ReplaceDB(db)
	return c
}

type columnDODo struct{ gen.DO }

func (c columnDODo) Debug() *columnDODo {
	return c.withDO(c.DO.Debug())
}

func (c columnDODo) WithContext(ctx context.Context) *columnDODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c columnDODo) ReadDB() *columnDODo {
	return c.Clauses(dbresolver.Read)
}

func (c columnDODo) WriteDB() *columnDODo {
	return c.Clauses(dbresolver.Write)
}

func (c columnDODo) Session(config *gorm.Session) *columnDODo {
	return c.withDO(c.DO.Session(config))
}

func (c columnDODo) Clauses(conds ...clause.Expression) *columnDODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c columnDODo) Returning(value interface{}, columns ...string) *columnDODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c columnDODo) Not(conds ...gen.Condition) *columnDODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c columnDODo) Or(conds ...gen.Condition) *columnDODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c columnDODo) Select(conds ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c columnDODo) Where(conds ...gen.Condition) *columnDODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c columnDODo) Order(conds ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c columnDODo) Distinct(cols ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c columnDODo) Omit(cols ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c columnDODo) Join(table schema.Tabler, on ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c columnDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *columnDODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c columnDODo) RightJoin(table schema.Tabler, on ...field.Expr) *columnDODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c columnDODo) Group(cols ...field.Expr) *columnDODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c columnDODo) Having(conds ...gen.Condition) *columnDODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c columnDODo) Limit(limit int) *columnDODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c columnDODo) Offset(offset int) *columnDODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c columnDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *columnDODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c columnDODo) Unscoped() *columnDODo {
	return c.withDO(c.DO.Unscoped())
}

func (c columnDODo) Create(values ...*db_model.ColumnDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c columnDODo) CreateInBatches(values []*db_model.ColumnDO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c columnDODo) Save(values ...*db_model.ColumnDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c columnDODo) First() (*db_model.ColumnDO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ColumnDO), nil
	}
}

func (c columnDODo) Take() (*db_model.ColumnDO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ColumnDO), nil
	}
}

func (c columnDODo) Last() (*db_model.ColumnDO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ColumnDO), nil
	}
}

func (c columnDODo) Find() ([]*db_model.ColumnDO, error) {
	result, err := c.DO.Find()
	return result.([]*db_model.ColumnDO), err
}

func (c columnDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.ColumnDO, err error) {
	buf := make([]*db_model.ColumnDO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c columnDODo) FindInBatches(result *[]*db_model.ColumnDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c columnDODo) Attrs(attrs ...field.AssignExpr) *columnDODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c columnDODo) Assign(attrs ...field.AssignExpr) *columnDODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c columnDODo) Joins(fields ...field.RelationField) *columnDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c columnDODo) Preload(fields ...field.RelationField) *columnDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c columnDODo) FirstOrInit() (*db_model.ColumnDO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ColumnDO), nil
	}
}

func (c columnDODo) FirstOrCreate() (*db_model.ColumnDO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ColumnDO), nil
	}
}

func (c columnDODo) FindByPage(offset int, limit int) (result []*db_model.ColumnDO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c columnDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c columnDODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c columnDODo) Delete(models ...*db_model.ColumnDO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *columnDODo) withDO(do gen.Dao) *columnDODo {
	c.DO = *do.(*gen.DO)
	return c
}
