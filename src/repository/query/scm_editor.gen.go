// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newEditorDO(db *gorm.DB, opts ...gen.DOOption) editorDO {
	_editorDO := editorDO{}

	_editorDO.editorDODo.UseDB(db, opts...)
	_editorDO.editorDODo.UseModel(&db_model.EditorDO{})

	tableName := _editorDO.editorDODo.TableName()
	_editorDO.ALL = field.NewAsterisk(tableName)
	_editorDO.ID = field.NewInt64(tableName, "id")
	_editorDO.CreateTime = field.NewTime(tableName, "create_time")
	_editorDO.UpdateTime = field.NewTime(tableName, "update_time")
	_editorDO.Username = field.NewString(tableName, "username")
	_editorDO.Password = field.NewString(tableName, "password")
	_editorDO.WorkNo = field.NewString(tableName, "work_no")

	_editorDO.fillFieldMap()

	return _editorDO
}

// editorDO 小二表
type editorDO struct {
	editorDODo editorDODo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	Username   field.String // 昵称
	Password   field.String // 密码
	WorkNo     field.String // 工号

	fieldMap map[string]field.Expr
}

func (e editorDO) Table(newTableName string) *editorDO {
	e.editorDODo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e editorDO) As(alias string) *editorDO {
	e.editorDODo.DO = *(e.editorDODo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *editorDO) updateTableName(table string) *editorDO {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.Username = field.NewString(table, "username")
	e.Password = field.NewString(table, "password")
	e.WorkNo = field.NewString(table, "work_no")

	e.fillFieldMap()

	return e
}

func (e *editorDO) WithContext(ctx context.Context) *editorDODo { return e.editorDODo.WithContext(ctx) }

func (e editorDO) TableName() string { return e.editorDODo.TableName() }

func (e editorDO) Alias() string { return e.editorDODo.Alias() }

func (e editorDO) Columns(cols ...field.Expr) gen.Columns { return e.editorDODo.Columns(cols...) }

func (e *editorDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *editorDO) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["username"] = e.Username
	e.fieldMap["password"] = e.Password
	e.fieldMap["work_no"] = e.WorkNo
}

func (e editorDO) clone(db *gorm.DB) editorDO {
	e.editorDODo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e editorDO) replaceDB(db *gorm.DB) editorDO {
	e.editorDODo.ReplaceDB(db)
	return e
}

type editorDODo struct{ gen.DO }

func (e editorDODo) Debug() *editorDODo {
	return e.withDO(e.DO.Debug())
}

func (e editorDODo) WithContext(ctx context.Context) *editorDODo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e editorDODo) ReadDB() *editorDODo {
	return e.Clauses(dbresolver.Read)
}

func (e editorDODo) WriteDB() *editorDODo {
	return e.Clauses(dbresolver.Write)
}

func (e editorDODo) Session(config *gorm.Session) *editorDODo {
	return e.withDO(e.DO.Session(config))
}

func (e editorDODo) Clauses(conds ...clause.Expression) *editorDODo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e editorDODo) Returning(value interface{}, columns ...string) *editorDODo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e editorDODo) Not(conds ...gen.Condition) *editorDODo {
	return e.withDO(e.DO.Not(conds...))
}

func (e editorDODo) Or(conds ...gen.Condition) *editorDODo {
	return e.withDO(e.DO.Or(conds...))
}

func (e editorDODo) Select(conds ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Select(conds...))
}

func (e editorDODo) Where(conds ...gen.Condition) *editorDODo {
	return e.withDO(e.DO.Where(conds...))
}

func (e editorDODo) Order(conds ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Order(conds...))
}

func (e editorDODo) Distinct(cols ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e editorDODo) Omit(cols ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e editorDODo) Join(table schema.Tabler, on ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e editorDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *editorDODo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e editorDODo) RightJoin(table schema.Tabler, on ...field.Expr) *editorDODo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e editorDODo) Group(cols ...field.Expr) *editorDODo {
	return e.withDO(e.DO.Group(cols...))
}

func (e editorDODo) Having(conds ...gen.Condition) *editorDODo {
	return e.withDO(e.DO.Having(conds...))
}

func (e editorDODo) Limit(limit int) *editorDODo {
	return e.withDO(e.DO.Limit(limit))
}

func (e editorDODo) Offset(offset int) *editorDODo {
	return e.withDO(e.DO.Offset(offset))
}

func (e editorDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *editorDODo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e editorDODo) Unscoped() *editorDODo {
	return e.withDO(e.DO.Unscoped())
}

func (e editorDODo) Create(values ...*db_model.EditorDO) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e editorDODo) CreateInBatches(values []*db_model.EditorDO, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e editorDODo) Save(values ...*db_model.EditorDO) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e editorDODo) First() (*db_model.EditorDO, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.EditorDO), nil
	}
}

func (e editorDODo) Take() (*db_model.EditorDO, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.EditorDO), nil
	}
}

func (e editorDODo) Last() (*db_model.EditorDO, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.EditorDO), nil
	}
}

func (e editorDODo) Find() ([]*db_model.EditorDO, error) {
	result, err := e.DO.Find()
	return result.([]*db_model.EditorDO), err
}

func (e editorDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.EditorDO, err error) {
	buf := make([]*db_model.EditorDO, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e editorDODo) FindInBatches(result *[]*db_model.EditorDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e editorDODo) Attrs(attrs ...field.AssignExpr) *editorDODo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e editorDODo) Assign(attrs ...field.AssignExpr) *editorDODo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e editorDODo) Joins(fields ...field.RelationField) *editorDODo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e editorDODo) Preload(fields ...field.RelationField) *editorDODo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e editorDODo) FirstOrInit() (*db_model.EditorDO, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.EditorDO), nil
	}
}

func (e editorDODo) FirstOrCreate() (*db_model.EditorDO, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.EditorDO), nil
	}
}

func (e editorDODo) FindByPage(offset int, limit int) (result []*db_model.EditorDO, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e editorDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e editorDODo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e editorDODo) Delete(models ...*db_model.EditorDO) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *editorDODo) withDO(do gen.Dao) *editorDODo {
	e.DO = *do.(*gen.DO)
	return e
}
