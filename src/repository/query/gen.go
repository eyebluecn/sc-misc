// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	AuthorDO      *authorDO
	ColumnDO      *columnDO
	ColumnQuoteDO *columnQuoteDO
	CommissionDO  *commissionDO
	ContractDO    *contractDO
	EditorDO      *editorDO
	PaymentDO     *paymentDO
	ReaderDO      *readerDO
	ReceiptDO     *receiptDO
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AuthorDO = &Q.AuthorDO
	ColumnDO = &Q.ColumnDO
	ColumnQuoteDO = &Q.ColumnQuoteDO
	CommissionDO = &Q.CommissionDO
	ContractDO = &Q.ContractDO
	EditorDO = &Q.EditorDO
	PaymentDO = &Q.PaymentDO
	ReaderDO = &Q.ReaderDO
	ReceiptDO = &Q.ReceiptDO
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		AuthorDO:      newAuthorDO(db, opts...),
		ColumnDO:      newColumnDO(db, opts...),
		ColumnQuoteDO: newColumnQuoteDO(db, opts...),
		CommissionDO:  newCommissionDO(db, opts...),
		ContractDO:    newContractDO(db, opts...),
		EditorDO:      newEditorDO(db, opts...),
		PaymentDO:     newPaymentDO(db, opts...),
		ReaderDO:      newReaderDO(db, opts...),
		ReceiptDO:     newReceiptDO(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AuthorDO      authorDO
	ColumnDO      columnDO
	ColumnQuoteDO columnQuoteDO
	CommissionDO  commissionDO
	ContractDO    contractDO
	EditorDO      editorDO
	PaymentDO     paymentDO
	ReaderDO      readerDO
	ReceiptDO     receiptDO
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AuthorDO:      q.AuthorDO.clone(db),
		ColumnDO:      q.ColumnDO.clone(db),
		ColumnQuoteDO: q.ColumnQuoteDO.clone(db),
		CommissionDO:  q.CommissionDO.clone(db),
		ContractDO:    q.ContractDO.clone(db),
		EditorDO:      q.EditorDO.clone(db),
		PaymentDO:     q.PaymentDO.clone(db),
		ReaderDO:      q.ReaderDO.clone(db),
		ReceiptDO:     q.ReceiptDO.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AuthorDO:      q.AuthorDO.replaceDB(db),
		ColumnDO:      q.ColumnDO.replaceDB(db),
		ColumnQuoteDO: q.ColumnQuoteDO.replaceDB(db),
		CommissionDO:  q.CommissionDO.replaceDB(db),
		ContractDO:    q.ContractDO.replaceDB(db),
		EditorDO:      q.EditorDO.replaceDB(db),
		PaymentDO:     q.PaymentDO.replaceDB(db),
		ReaderDO:      q.ReaderDO.replaceDB(db),
		ReceiptDO:     q.ReceiptDO.replaceDB(db),
	}
}

type queryCtx struct {
	AuthorDO      *authorDODo
	ColumnDO      *columnDODo
	ColumnQuoteDO *columnQuoteDODo
	CommissionDO  *commissionDODo
	ContractDO    *contractDODo
	EditorDO      *editorDODo
	PaymentDO     *paymentDODo
	ReaderDO      *readerDODo
	ReceiptDO     *receiptDODo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AuthorDO:      q.AuthorDO.WithContext(ctx),
		ColumnDO:      q.ColumnDO.WithContext(ctx),
		ColumnQuoteDO: q.ColumnQuoteDO.WithContext(ctx),
		CommissionDO:  q.CommissionDO.WithContext(ctx),
		ContractDO:    q.ContractDO.WithContext(ctx),
		EditorDO:      q.EditorDO.WithContext(ctx),
		PaymentDO:     q.PaymentDO.WithContext(ctx),
		ReaderDO:      q.ReaderDO.WithContext(ctx),
		ReceiptDO:     q.ReceiptDO.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
