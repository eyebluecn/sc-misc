// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	AuthorPO      *authorPO
	ColumnPO      *columnPO
	ColumnQuotePO *columnQuotePO
	CommissionPO  *commissionPO
	ContractPO    *contractPO
	EditorPO      *editorPO
	PaymentPO     *paymentPO
	ReaderPO      *readerPO
	ReceiptPO     *receiptPO
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AuthorPO = &Q.AuthorPO
	ColumnPO = &Q.ColumnPO
	ColumnQuotePO = &Q.ColumnQuotePO
	CommissionPO = &Q.CommissionPO
	ContractPO = &Q.ContractPO
	EditorPO = &Q.EditorPO
	PaymentPO = &Q.PaymentPO
	ReaderPO = &Q.ReaderPO
	ReceiptPO = &Q.ReceiptPO
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		AuthorPO:      newAuthorPO(db, opts...),
		ColumnPO:      newColumnPO(db, opts...),
		ColumnQuotePO: newColumnQuotePO(db, opts...),
		CommissionPO:  newCommissionPO(db, opts...),
		ContractPO:    newContractPO(db, opts...),
		EditorPO:      newEditorPO(db, opts...),
		PaymentPO:     newPaymentPO(db, opts...),
		ReaderPO:      newReaderPO(db, opts...),
		ReceiptPO:     newReceiptPO(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AuthorPO      authorPO
	ColumnPO      columnPO
	ColumnQuotePO columnQuotePO
	CommissionPO  commissionPO
	ContractPO    contractPO
	EditorPO      editorPO
	PaymentPO     paymentPO
	ReaderPO      readerPO
	ReceiptPO     receiptPO
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AuthorPO:      q.AuthorPO.clone(db),
		ColumnPO:      q.ColumnPO.clone(db),
		ColumnQuotePO: q.ColumnQuotePO.clone(db),
		CommissionPO:  q.CommissionPO.clone(db),
		ContractPO:    q.ContractPO.clone(db),
		EditorPO:      q.EditorPO.clone(db),
		PaymentPO:     q.PaymentPO.clone(db),
		ReaderPO:      q.ReaderPO.clone(db),
		ReceiptPO:     q.ReceiptPO.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		AuthorPO:      q.AuthorPO.replaceDB(db),
		ColumnPO:      q.ColumnPO.replaceDB(db),
		ColumnQuotePO: q.ColumnQuotePO.replaceDB(db),
		CommissionPO:  q.CommissionPO.replaceDB(db),
		ContractPO:    q.ContractPO.replaceDB(db),
		EditorPO:      q.EditorPO.replaceDB(db),
		PaymentPO:     q.PaymentPO.replaceDB(db),
		ReaderPO:      q.ReaderPO.replaceDB(db),
		ReceiptPO:     q.ReceiptPO.replaceDB(db),
	}
}

type queryCtx struct {
	AuthorPO      *authorPODo
	ColumnPO      *columnPODo
	ColumnQuotePO *columnQuotePODo
	CommissionPO  *commissionPODo
	ContractPO    *contractPODo
	EditorPO      *editorPODo
	PaymentPO     *paymentPODo
	ReaderPO      *readerPODo
	ReceiptPO     *receiptPODo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AuthorPO:      q.AuthorPO.WithContext(ctx),
		ColumnPO:      q.ColumnPO.WithContext(ctx),
		ColumnQuotePO: q.ColumnQuotePO.WithContext(ctx),
		CommissionPO:  q.CommissionPO.WithContext(ctx),
		ContractPO:    q.ContractPO.WithContext(ctx),
		EditorPO:      q.EditorPO.WithContext(ctx),
		PaymentPO:     q.PaymentPO.WithContext(ctx),
		ReaderPO:      q.ReaderPO.WithContext(ctx),
		ReceiptPO:     q.ReceiptPO.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
