// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newPaymentPO(db *gorm.DB, opts ...gen.DOOption) paymentPO {
	_paymentPO := paymentPO{}

	_paymentPO.paymentPODo.UseDB(db, opts...)
	_paymentPO.paymentPODo.UseModel(&po.PaymentPO{})

	tableName := _paymentPO.paymentPODo.TableName()
	_paymentPO.ALL = field.NewAsterisk(tableName)
	_paymentPO.ID = field.NewInt64(tableName, "id")
	_paymentPO.CreateTime = field.NewTime(tableName, "create_time")
	_paymentPO.UpdateTime = field.NewTime(tableName, "update_time")
	_paymentPO.OrderNo = field.NewString(tableName, "order_no")
	_paymentPO.Method = field.NewString(tableName, "method")
	_paymentPO.ThirdTransactionNo = field.NewString(tableName, "third_transaction_no")
	_paymentPO.Amount = field.NewInt64(tableName, "amount")
	_paymentPO.Status = field.NewInt32(tableName, "status")

	_paymentPO.fillFieldMap()

	return _paymentPO
}

// paymentPO 支付单，用户支付给平台的单据
type paymentPO struct {
	paymentPODo paymentPODo

	ALL                field.Asterisk
	ID                 field.Int64  // 主键
	CreateTime         field.Time   // 创建时间
	UpdateTime         field.Time   // 更新时间
	OrderNo            field.String // 订单编号
	Method             field.String // 支付方式 ALIPAY/WEIXIN 支付宝/微信
	ThirdTransactionNo field.String // 支付平台订单号
	Amount             field.Int64  // 金额(单位：分)
	Status             field.Int32  // 支付状态 0/1/2  未支付/已支付/已关闭

	fieldMap map[string]field.Expr
}

func (p paymentPO) Table(newTableName string) *paymentPO {
	p.paymentPODo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentPO) As(alias string) *paymentPO {
	p.paymentPODo.DO = *(p.paymentPODo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentPO) updateTableName(table string) *paymentPO {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.OrderNo = field.NewString(table, "order_no")
	p.Method = field.NewString(table, "method")
	p.ThirdTransactionNo = field.NewString(table, "third_transaction_no")
	p.Amount = field.NewInt64(table, "amount")
	p.Status = field.NewInt32(table, "status")

	p.fillFieldMap()

	return p
}

func (p *paymentPO) WithContext(ctx context.Context) *paymentPODo {
	return p.paymentPODo.WithContext(ctx)
}

func (p paymentPO) TableName() string { return p.paymentPODo.TableName() }

func (p paymentPO) Alias() string { return p.paymentPODo.Alias() }

func (p paymentPO) Columns(cols ...field.Expr) gen.Columns { return p.paymentPODo.Columns(cols...) }

func (p *paymentPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentPO) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["order_no"] = p.OrderNo
	p.fieldMap["method"] = p.Method
	p.fieldMap["third_transaction_no"] = p.ThirdTransactionNo
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["status"] = p.Status
}

func (p paymentPO) clone(db *gorm.DB) paymentPO {
	p.paymentPODo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentPO) replaceDB(db *gorm.DB) paymentPO {
	p.paymentPODo.ReplaceDB(db)
	return p
}

type paymentPODo struct{ gen.DO }

func (p paymentPODo) Debug() *paymentPODo {
	return p.withDO(p.DO.Debug())
}

func (p paymentPODo) WithContext(ctx context.Context) *paymentPODo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentPODo) ReadDB() *paymentPODo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentPODo) WriteDB() *paymentPODo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentPODo) Session(config *gorm.Session) *paymentPODo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentPODo) Clauses(conds ...clause.Expression) *paymentPODo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentPODo) Returning(value interface{}, columns ...string) *paymentPODo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentPODo) Not(conds ...gen.Condition) *paymentPODo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentPODo) Or(conds ...gen.Condition) *paymentPODo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentPODo) Select(conds ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentPODo) Where(conds ...gen.Condition) *paymentPODo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentPODo) Order(conds ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentPODo) Distinct(cols ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentPODo) Omit(cols ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentPODo) Join(table schema.Tabler, on ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentPODo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentPODo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentPODo) Group(cols ...field.Expr) *paymentPODo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentPODo) Having(conds ...gen.Condition) *paymentPODo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentPODo) Limit(limit int) *paymentPODo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentPODo) Offset(offset int) *paymentPODo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentPODo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentPODo) Unscoped() *paymentPODo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentPODo) Create(values ...*po.PaymentPO) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentPODo) CreateInBatches(values []*po.PaymentPO, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentPODo) Save(values ...*po.PaymentPO) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentPODo) First() (*po.PaymentPO, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.PaymentPO), nil
	}
}

func (p paymentPODo) Take() (*po.PaymentPO, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.PaymentPO), nil
	}
}

func (p paymentPODo) Last() (*po.PaymentPO, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.PaymentPO), nil
	}
}

func (p paymentPODo) Find() ([]*po.PaymentPO, error) {
	result, err := p.DO.Find()
	return result.([]*po.PaymentPO), err
}

func (p paymentPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.PaymentPO, err error) {
	buf := make([]*po.PaymentPO, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentPODo) FindInBatches(result *[]*po.PaymentPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentPODo) Attrs(attrs ...field.AssignExpr) *paymentPODo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentPODo) Assign(attrs ...field.AssignExpr) *paymentPODo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentPODo) Joins(fields ...field.RelationField) *paymentPODo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentPODo) Preload(fields ...field.RelationField) *paymentPODo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentPODo) FirstOrInit() (*po.PaymentPO, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.PaymentPO), nil
	}
}

func (p paymentPODo) FirstOrCreate() (*po.PaymentPO, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.PaymentPO), nil
	}
}

func (p paymentPODo) FindByPage(offset int, limit int) (result []*po.PaymentPO, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentPODo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentPODo) Delete(models ...*po.PaymentPO) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentPODo) withDO(do gen.Dao) *paymentPODo {
	p.DO = *do.(*gen.DO)
	return p
}
