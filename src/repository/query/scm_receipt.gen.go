// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newReceiptDO(db *gorm.DB, opts ...gen.DOOption) receiptDO {
	_receiptDO := receiptDO{}

	_receiptDO.receiptDODo.UseDB(db, opts...)
	_receiptDO.receiptDODo.UseModel(&db_model.ReceiptDO{})

	tableName := _receiptDO.receiptDODo.TableName()
	_receiptDO.ALL = field.NewAsterisk(tableName)
	_receiptDO.ID = field.NewInt64(tableName, "id")
	_receiptDO.CreateTime = field.NewTime(tableName, "create_time")
	_receiptDO.UpdateTime = field.NewTime(tableName, "update_time")
	_receiptDO.OrderNo = field.NewString(tableName, "order_no")
	_receiptDO.Method = field.NewString(tableName, "method")
	_receiptDO.ThirdTransactionNo = field.NewString(tableName, "third_transaction_no")
	_receiptDO.Amount = field.NewInt64(tableName, "amount")
	_receiptDO.Status = field.NewInt32(tableName, "status")

	_receiptDO.fillFieldMap()

	return _receiptDO
}

// receiptDO 收款单，作者从平台收款的单据
type receiptDO struct {
	receiptDODo receiptDODo

	ALL                field.Asterisk
	ID                 field.Int64  // 主键
	CreateTime         field.Time   // 创建时间
	UpdateTime         field.Time   // 更新时间
	OrderNo            field.String // 订单编号
	Method             field.String // 收款方式 ALIPAY/WEIXIN 支付宝/微信
	ThirdTransactionNo field.String // 收款平台订单号
	Amount             field.Int64  // 金额(单位：分)
	Status             field.Int32  // 支付状态 0/1/2 未收款/已收款/已关闭

	fieldMap map[string]field.Expr
}

func (r receiptDO) Table(newTableName string) *receiptDO {
	r.receiptDODo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r receiptDO) As(alias string) *receiptDO {
	r.receiptDODo.DO = *(r.receiptDODo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *receiptDO) updateTableName(table string) *receiptDO {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.OrderNo = field.NewString(table, "order_no")
	r.Method = field.NewString(table, "method")
	r.ThirdTransactionNo = field.NewString(table, "third_transaction_no")
	r.Amount = field.NewInt64(table, "amount")
	r.Status = field.NewInt32(table, "status")

	r.fillFieldMap()

	return r
}

func (r *receiptDO) WithContext(ctx context.Context) *receiptDODo {
	return r.receiptDODo.WithContext(ctx)
}

func (r receiptDO) TableName() string { return r.receiptDODo.TableName() }

func (r receiptDO) Alias() string { return r.receiptDODo.Alias() }

func (r receiptDO) Columns(cols ...field.Expr) gen.Columns { return r.receiptDODo.Columns(cols...) }

func (r *receiptDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *receiptDO) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["order_no"] = r.OrderNo
	r.fieldMap["method"] = r.Method
	r.fieldMap["third_transaction_no"] = r.ThirdTransactionNo
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["status"] = r.Status
}

func (r receiptDO) clone(db *gorm.DB) receiptDO {
	r.receiptDODo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r receiptDO) replaceDB(db *gorm.DB) receiptDO {
	r.receiptDODo.ReplaceDB(db)
	return r
}

type receiptDODo struct{ gen.DO }

func (r receiptDODo) Debug() *receiptDODo {
	return r.withDO(r.DO.Debug())
}

func (r receiptDODo) WithContext(ctx context.Context) *receiptDODo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r receiptDODo) ReadDB() *receiptDODo {
	return r.Clauses(dbresolver.Read)
}

func (r receiptDODo) WriteDB() *receiptDODo {
	return r.Clauses(dbresolver.Write)
}

func (r receiptDODo) Session(config *gorm.Session) *receiptDODo {
	return r.withDO(r.DO.Session(config))
}

func (r receiptDODo) Clauses(conds ...clause.Expression) *receiptDODo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r receiptDODo) Returning(value interface{}, columns ...string) *receiptDODo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r receiptDODo) Not(conds ...gen.Condition) *receiptDODo {
	return r.withDO(r.DO.Not(conds...))
}

func (r receiptDODo) Or(conds ...gen.Condition) *receiptDODo {
	return r.withDO(r.DO.Or(conds...))
}

func (r receiptDODo) Select(conds ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Select(conds...))
}

func (r receiptDODo) Where(conds ...gen.Condition) *receiptDODo {
	return r.withDO(r.DO.Where(conds...))
}

func (r receiptDODo) Order(conds ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Order(conds...))
}

func (r receiptDODo) Distinct(cols ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r receiptDODo) Omit(cols ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r receiptDODo) Join(table schema.Tabler, on ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r receiptDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r receiptDODo) RightJoin(table schema.Tabler, on ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r receiptDODo) Group(cols ...field.Expr) *receiptDODo {
	return r.withDO(r.DO.Group(cols...))
}

func (r receiptDODo) Having(conds ...gen.Condition) *receiptDODo {
	return r.withDO(r.DO.Having(conds...))
}

func (r receiptDODo) Limit(limit int) *receiptDODo {
	return r.withDO(r.DO.Limit(limit))
}

func (r receiptDODo) Offset(offset int) *receiptDODo {
	return r.withDO(r.DO.Offset(offset))
}

func (r receiptDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *receiptDODo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r receiptDODo) Unscoped() *receiptDODo {
	return r.withDO(r.DO.Unscoped())
}

func (r receiptDODo) Create(values ...*db_model.ReceiptDO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r receiptDODo) CreateInBatches(values []*db_model.ReceiptDO, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r receiptDODo) Save(values ...*db_model.ReceiptDO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r receiptDODo) First() (*db_model.ReceiptDO, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReceiptDO), nil
	}
}

func (r receiptDODo) Take() (*db_model.ReceiptDO, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReceiptDO), nil
	}
}

func (r receiptDODo) Last() (*db_model.ReceiptDO, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReceiptDO), nil
	}
}

func (r receiptDODo) Find() ([]*db_model.ReceiptDO, error) {
	result, err := r.DO.Find()
	return result.([]*db_model.ReceiptDO), err
}

func (r receiptDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.ReceiptDO, err error) {
	buf := make([]*db_model.ReceiptDO, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r receiptDODo) FindInBatches(result *[]*db_model.ReceiptDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r receiptDODo) Attrs(attrs ...field.AssignExpr) *receiptDODo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r receiptDODo) Assign(attrs ...field.AssignExpr) *receiptDODo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r receiptDODo) Joins(fields ...field.RelationField) *receiptDODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r receiptDODo) Preload(fields ...field.RelationField) *receiptDODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r receiptDODo) FirstOrInit() (*db_model.ReceiptDO, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReceiptDO), nil
	}
}

func (r receiptDODo) FirstOrCreate() (*db_model.ReceiptDO, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReceiptDO), nil
	}
}

func (r receiptDODo) FindByPage(offset int, limit int) (result []*db_model.ReceiptDO, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r receiptDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r receiptDODo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r receiptDODo) Delete(models ...*db_model.ReceiptDO) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *receiptDODo) withDO(do gen.Dao) *receiptDODo {
	r.DO = *do.(*gen.DO)
	return r
}
