// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newReaderDO(db *gorm.DB, opts ...gen.DOOption) readerDO {
	_readerDO := readerDO{}

	_readerDO.readerDODo.UseDB(db, opts...)
	_readerDO.readerDODo.UseModel(&db_model.ReaderDO{})

	tableName := _readerDO.readerDODo.TableName()
	_readerDO.ALL = field.NewAsterisk(tableName)
	_readerDO.ID = field.NewInt64(tableName, "id")
	_readerDO.CreateTime = field.NewTime(tableName, "create_time")
	_readerDO.UpdateTime = field.NewTime(tableName, "update_time")
	_readerDO.Username = field.NewString(tableName, "username")
	_readerDO.Password = field.NewString(tableName, "password")

	_readerDO.fillFieldMap()

	return _readerDO
}

// readerDO 读者表
type readerDO struct {
	readerDODo readerDODo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	Username   field.String // 用户名
	Password   field.String // 密码

	fieldMap map[string]field.Expr
}

func (r readerDO) Table(newTableName string) *readerDO {
	r.readerDODo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r readerDO) As(alias string) *readerDO {
	r.readerDODo.DO = *(r.readerDODo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *readerDO) updateTableName(table string) *readerDO {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.Username = field.NewString(table, "username")
	r.Password = field.NewString(table, "password")

	r.fillFieldMap()

	return r
}

func (r *readerDO) WithContext(ctx context.Context) *readerDODo { return r.readerDODo.WithContext(ctx) }

func (r readerDO) TableName() string { return r.readerDODo.TableName() }

func (r readerDO) Alias() string { return r.readerDODo.Alias() }

func (r readerDO) Columns(cols ...field.Expr) gen.Columns { return r.readerDODo.Columns(cols...) }

func (r *readerDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *readerDO) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["username"] = r.Username
	r.fieldMap["password"] = r.Password
}

func (r readerDO) clone(db *gorm.DB) readerDO {
	r.readerDODo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r readerDO) replaceDB(db *gorm.DB) readerDO {
	r.readerDODo.ReplaceDB(db)
	return r
}

type readerDODo struct{ gen.DO }

func (r readerDODo) Debug() *readerDODo {
	return r.withDO(r.DO.Debug())
}

func (r readerDODo) WithContext(ctx context.Context) *readerDODo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r readerDODo) ReadDB() *readerDODo {
	return r.Clauses(dbresolver.Read)
}

func (r readerDODo) WriteDB() *readerDODo {
	return r.Clauses(dbresolver.Write)
}

func (r readerDODo) Session(config *gorm.Session) *readerDODo {
	return r.withDO(r.DO.Session(config))
}

func (r readerDODo) Clauses(conds ...clause.Expression) *readerDODo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r readerDODo) Returning(value interface{}, columns ...string) *readerDODo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r readerDODo) Not(conds ...gen.Condition) *readerDODo {
	return r.withDO(r.DO.Not(conds...))
}

func (r readerDODo) Or(conds ...gen.Condition) *readerDODo {
	return r.withDO(r.DO.Or(conds...))
}

func (r readerDODo) Select(conds ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Select(conds...))
}

func (r readerDODo) Where(conds ...gen.Condition) *readerDODo {
	return r.withDO(r.DO.Where(conds...))
}

func (r readerDODo) Order(conds ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Order(conds...))
}

func (r readerDODo) Distinct(cols ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r readerDODo) Omit(cols ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r readerDODo) Join(table schema.Tabler, on ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r readerDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *readerDODo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r readerDODo) RightJoin(table schema.Tabler, on ...field.Expr) *readerDODo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r readerDODo) Group(cols ...field.Expr) *readerDODo {
	return r.withDO(r.DO.Group(cols...))
}

func (r readerDODo) Having(conds ...gen.Condition) *readerDODo {
	return r.withDO(r.DO.Having(conds...))
}

func (r readerDODo) Limit(limit int) *readerDODo {
	return r.withDO(r.DO.Limit(limit))
}

func (r readerDODo) Offset(offset int) *readerDODo {
	return r.withDO(r.DO.Offset(offset))
}

func (r readerDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *readerDODo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r readerDODo) Unscoped() *readerDODo {
	return r.withDO(r.DO.Unscoped())
}

func (r readerDODo) Create(values ...*db_model.ReaderDO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r readerDODo) CreateInBatches(values []*db_model.ReaderDO, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r readerDODo) Save(values ...*db_model.ReaderDO) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r readerDODo) First() (*db_model.ReaderDO, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReaderDO), nil
	}
}

func (r readerDODo) Take() (*db_model.ReaderDO, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReaderDO), nil
	}
}

func (r readerDODo) Last() (*db_model.ReaderDO, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReaderDO), nil
	}
}

func (r readerDODo) Find() ([]*db_model.ReaderDO, error) {
	result, err := r.DO.Find()
	return result.([]*db_model.ReaderDO), err
}

func (r readerDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.ReaderDO, err error) {
	buf := make([]*db_model.ReaderDO, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r readerDODo) FindInBatches(result *[]*db_model.ReaderDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r readerDODo) Attrs(attrs ...field.AssignExpr) *readerDODo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r readerDODo) Assign(attrs ...field.AssignExpr) *readerDODo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r readerDODo) Joins(fields ...field.RelationField) *readerDODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r readerDODo) Preload(fields ...field.RelationField) *readerDODo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r readerDODo) FirstOrInit() (*db_model.ReaderDO, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReaderDO), nil
	}
}

func (r readerDODo) FirstOrCreate() (*db_model.ReaderDO, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ReaderDO), nil
	}
}

func (r readerDODo) FindByPage(offset int, limit int) (result []*db_model.ReaderDO, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r readerDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r readerDODo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r readerDODo) Delete(models ...*db_model.ReaderDO) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *readerDODo) withDO(do gen.Dao) *readerDODo {
	r.DO = *do.(*gen.DO)
	return r
}
