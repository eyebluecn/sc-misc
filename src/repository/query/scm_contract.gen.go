// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/repository/db_model"
)

func newContractDO(db *gorm.DB, opts ...gen.DOOption) contractDO {
	_contractDO := contractDO{}

	_contractDO.contractDODo.UseDB(db, opts...)
	_contractDO.contractDODo.UseModel(&db_model.ContractDO{})

	tableName := _contractDO.contractDODo.TableName()
	_contractDO.ALL = field.NewAsterisk(tableName)
	_contractDO.ID = field.NewInt64(tableName, "id")
	_contractDO.CreateTime = field.NewTime(tableName, "create_time")
	_contractDO.UpdateTime = field.NewTime(tableName, "update_time")
	_contractDO.Name = field.NewString(tableName, "name")
	_contractDO.Content = field.NewString(tableName, "content")
	_contractDO.ColumnID = field.NewInt64(tableName, "column_id")
	_contractDO.AuthorID = field.NewInt64(tableName, "author_id")
	_contractDO.Status = field.NewInt32(tableName, "status")
	_contractDO.Percentage = field.NewFloat64(tableName, "percentage")
	_contractDO.PaymentDay = field.NewString(tableName, "payment_day")

	_contractDO.fillFieldMap()

	return _contractDO
}

// contractDO 作者表
type contractDO struct {
	contractDODo contractDODo

	ALL        field.Asterisk
	ID         field.Int64   // 主键
	CreateTime field.Time    // 创建时间
	UpdateTime field.Time    // 更新时间
	Name       field.String  // 名称
	Content    field.String  // 内容
	ColumnID   field.Int64   // 专栏id
	AuthorID   field.Int64   // 作者id
	Status     field.Int32   // 状态 0/1/2 未生效/已生效/已禁用
	Percentage field.Float64 // 分成比例
	PaymentDay field.String  // 账期日

	fieldMap map[string]field.Expr
}

func (c contractDO) Table(newTableName string) *contractDO {
	c.contractDODo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contractDO) As(alias string) *contractDO {
	c.contractDODo.DO = *(c.contractDODo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contractDO) updateTableName(table string) *contractDO {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.Name = field.NewString(table, "name")
	c.Content = field.NewString(table, "content")
	c.ColumnID = field.NewInt64(table, "column_id")
	c.AuthorID = field.NewInt64(table, "author_id")
	c.Status = field.NewInt32(table, "status")
	c.Percentage = field.NewFloat64(table, "percentage")
	c.PaymentDay = field.NewString(table, "payment_day")

	c.fillFieldMap()

	return c
}

func (c *contractDO) WithContext(ctx context.Context) *contractDODo {
	return c.contractDODo.WithContext(ctx)
}

func (c contractDO) TableName() string { return c.contractDODo.TableName() }

func (c contractDO) Alias() string { return c.contractDODo.Alias() }

func (c contractDO) Columns(cols ...field.Expr) gen.Columns { return c.contractDODo.Columns(cols...) }

func (c *contractDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contractDO) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["name"] = c.Name
	c.fieldMap["content"] = c.Content
	c.fieldMap["column_id"] = c.ColumnID
	c.fieldMap["author_id"] = c.AuthorID
	c.fieldMap["status"] = c.Status
	c.fieldMap["percentage"] = c.Percentage
	c.fieldMap["payment_day"] = c.PaymentDay
}

func (c contractDO) clone(db *gorm.DB) contractDO {
	c.contractDODo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contractDO) replaceDB(db *gorm.DB) contractDO {
	c.contractDODo.ReplaceDB(db)
	return c
}

type contractDODo struct{ gen.DO }

func (c contractDODo) Debug() *contractDODo {
	return c.withDO(c.DO.Debug())
}

func (c contractDODo) WithContext(ctx context.Context) *contractDODo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractDODo) ReadDB() *contractDODo {
	return c.Clauses(dbresolver.Read)
}

func (c contractDODo) WriteDB() *contractDODo {
	return c.Clauses(dbresolver.Write)
}

func (c contractDODo) Session(config *gorm.Session) *contractDODo {
	return c.withDO(c.DO.Session(config))
}

func (c contractDODo) Clauses(conds ...clause.Expression) *contractDODo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractDODo) Returning(value interface{}, columns ...string) *contractDODo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractDODo) Not(conds ...gen.Condition) *contractDODo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractDODo) Or(conds ...gen.Condition) *contractDODo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractDODo) Select(conds ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractDODo) Where(conds ...gen.Condition) *contractDODo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractDODo) Order(conds ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractDODo) Distinct(cols ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractDODo) Omit(cols ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractDODo) Join(table schema.Tabler, on ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *contractDODo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractDODo) RightJoin(table schema.Tabler, on ...field.Expr) *contractDODo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractDODo) Group(cols ...field.Expr) *contractDODo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractDODo) Having(conds ...gen.Condition) *contractDODo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractDODo) Limit(limit int) *contractDODo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractDODo) Offset(offset int) *contractDODo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contractDODo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractDODo) Unscoped() *contractDODo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractDODo) Create(values ...*db_model.ContractDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractDODo) CreateInBatches(values []*db_model.ContractDO, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractDODo) Save(values ...*db_model.ContractDO) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractDODo) First() (*db_model.ContractDO, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ContractDO), nil
	}
}

func (c contractDODo) Take() (*db_model.ContractDO, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ContractDO), nil
	}
}

func (c contractDODo) Last() (*db_model.ContractDO, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ContractDO), nil
	}
}

func (c contractDODo) Find() ([]*db_model.ContractDO, error) {
	result, err := c.DO.Find()
	return result.([]*db_model.ContractDO), err
}

func (c contractDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_model.ContractDO, err error) {
	buf := make([]*db_model.ContractDO, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractDODo) FindInBatches(result *[]*db_model.ContractDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractDODo) Attrs(attrs ...field.AssignExpr) *contractDODo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractDODo) Assign(attrs ...field.AssignExpr) *contractDODo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractDODo) Joins(fields ...field.RelationField) *contractDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractDODo) Preload(fields ...field.RelationField) *contractDODo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractDODo) FirstOrInit() (*db_model.ContractDO, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ContractDO), nil
	}
}

func (c contractDODo) FirstOrCreate() (*db_model.ContractDO, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_model.ContractDO), nil
	}
}

func (c contractDODo) FindByPage(offset int, limit int) (result []*db_model.ContractDO, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractDODo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractDODo) Delete(models ...*db_model.ContractDO) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractDODo) withDO(do gen.Dao) *contractDODo {
	c.DO = *do.(*gen.DO)
	return c
}
